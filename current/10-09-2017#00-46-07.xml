<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <HostPackage>
        <Host autoClearCommandLineAfterSend="no" disableAutoCompletion="no" printCommand="no" USE_IRE_DRIVER_BUGFIX="yes" mUSE_FORCE_LF_AFTER_PROMPT="yes" mUSE_UNIX_EOL="no" mNoAntiAlias="no" mEchoLuaErrors="yes" mRawStreamDump="no" mIsLoggingTimestamps="no" mAlertOnNewData="yes" mFORCE_NO_COMPRESSION="no" mFORCE_GA_OFF="no" mFORCE_SAVE_ON_EXIT="no" mEnableGMCP="yes" mEnableMSDP="no" mMapStrongHighlight="no" mLogStatus="no" mEnableSpellCheck="yes" mShowInfo="no" mAcceptServerGUI="yes" mMapperUseAntiAlias="yes" mFORCE_MXP_NEGOTIATION_OFF="no" mRoomSize="0.5" mLineSize="10.0" mBubbleMode="no" mShowRoomIDs="no" mShowPanel="yes" mHaveMapperScript="no" mEditorTheme="Mudlet" mEditorThemeFile="Mudlet.tmTheme" mThemePreviewItemID="70" mThemePreviewType="alias" mDoubleClickIgnore="&quot;'">
            <name>Godspeaker</name>
            <mInstalledPackages>
                <string>mudlet-mapper</string>
                <string>deleteOldProfiles</string>
                <string>echo</string>
                <string>run-lua-code-v4</string>
            </mInstalledPackages>
            <url>aetolia.com</url>
            <serverPackageName>nothing</serverPackageName>
            <serverPackageVersion>-1</serverPackageVersion>
            <port>23</port>
            <borderTopHeight>0</borderTopHeight>
            <borderBottomHeight>0</borderBottomHeight>
            <borderLeftWidth>0</borderLeftWidth>
            <borderRightWidth>0</borderRightWidth>
            <wrapAt>100</wrapAt>
            <wrapIndentCount>0</wrapIndentCount>
            <mFgColor>#c0c0c0</mFgColor>
            <mBgColor>#000000</mBgColor>
            <mCommandFgColor>#717100</mCommandFgColor>
            <mCommandBgColor>#000000</mCommandBgColor>
            <mCommandLineFgColor>#808080</mCommandLineFgColor>
            <mCommandLineBgColor>#000000</mCommandLineBgColor>
            <mBlack>#000000</mBlack>
            <mLightBlack>#808080</mLightBlack>
            <mRed>#800000</mRed>
            <mLightRed>#ff0000</mLightRed>
            <mBlue>#000080</mBlue>
            <mLightBlue>#0055ff</mLightBlue>
            <mGreen>#008000</mGreen>
            <mLightGreen>#00ff00</mLightGreen>
            <mYellow>#808000</mYellow>
            <mLightYellow>#ffff00</mLightYellow>
            <mCyan>#008080</mCyan>
            <mLightCyan>#00ffff</mLightCyan>
            <mMagenta>#800080</mMagenta>
            <mLightMagenta>#ff00ff</mLightMagenta>
            <mWhite>#c0c0c0</mWhite>
            <mLightWhite>#ffffff</mLightWhite>
            <mDisplayFont>Albedi (TTF) for Windows,9,-1,5,50,0,0,0,1,0</mDisplayFont>
            <mCommandLineFont>Bitstream Vera Sans Mono,10,-1,5,50,0,0,0,0,0</mCommandLineFont>
            <mCommandSeparator>;;</mCommandSeparator>
            <commandLineMinimumHeight>30</commandLineMinimumHeight>
            <mFgColor2>#c0c0c0</mFgColor2>
            <mBgColor2>#000000</mBgColor2>
            <mBlack2>#000000</mBlack2>
            <mLightBlack2>#808080</mLightBlack2>
            <mRed2>#800000</mRed2>
            <mLightRed2>#ff0000</mLightRed2>
            <mBlue2>#000080</mBlue2>
            <mLightBlue2>#0055ff</mLightBlue2>
            <mGreen2>#008000</mGreen2>
            <mLightGreen2>#00ff00</mLightGreen2>
            <mYellow2>#808000</mYellow2>
            <mLightYellow2>#ffff00</mLightYellow2>
            <mCyan2>#008080</mCyan2>
            <mLightCyan2>#00ffff</mLightCyan2>
            <mMagenta2>#800080</mMagenta2>
            <mLightMagenta2>#ff00ff</mLightMagenta2>
            <mWhite2>#c0c0c0</mWhite2>
            <mLightWhite2>#ffffff</mLightWhite2>
            <mSpellDic>en_US</mSpellDic>
            <mLineSize>10.0</mLineSize>
            <mRoomSize>0.5</mRoomSize>
        </Host>
    </HostPackage>
    <TriggerPackage/>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>System Controls</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>Open Profile Directory</name>
                <script>os.execute([[start &quot;&quot; &quot;]] .. getMudletHomeDir() .. [[\&quot;]])</script>
                <command></command>
                <packageName></packageName>
                <regex>^home\s?dir(?:ectory)?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Command-Line Lua Execution</name>
                <script>local f, e = loadstring(&quot;return &quot; .. matches[2])
if not f then
	f, e = assert(loadstring(matches[2]))
end

local r = f()
if r ~= nil then display(r) end</script>
                <command></command>
                <packageName></packageName>
                <regex>^\/run (.*)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Display Lua Value</name>
                <script>assert(loadstring(&quot;display(&quot; .. matches[2] .. &quot;)&quot;))()</script>
                <command></command>
                <packageName></packageName>
                <regex>^\@(.+)$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <Script isActive="yes" isFolder="no">
            <name>Initialization</name>
            <packageName></packageName>
            <script>-- Tools to govern the setup of Godspeaker at its lowest level. Establishes the
-- presence of all required folders, and loads any scripts located in 'scripts'
local slash = (string.char(getMudletHomeDir():byte()) == &quot;/&quot;) and &quot;/&quot; or &quot;\\&quot;
local path = getMudletHomeDir()
local profiles = path .. slash .. &quot;current&quot;
local scripts = path .. slash .. &quot;scripts&quot;

isDirectory = function (d)
	if lfs.attributes(d) ~= nil and lfs.attributes(d).mode == &quot;directory&quot; then
		return true
	end
	
	return false
end

-- Ensure the primary scripts folder is installed, or create it if not.
CheckForScriptsFolder = function ()
	if isDirectory(scripts) then
		return
	end
	
	local origin_dir = lfs.currentdir()
	lfs.chdir(path)
	lfs.mkdir(&quot;scripts&quot;)
	lfs.chdir(origin_dir)
end

-- Load any .lua files found in the scripts folder.
LoadFromScriptsFolder = function ()
	CheckForScriptsFolder()
	
	if not isDirectory(scripts) then
		error(&quot;LoadFromScriptsFolder(): Unable to find 'scripts' folder in profile directory.&quot;)
		return
	end
	
	for file in lfs.dir(scripts) do
		if not isDirectory(file) then
			file = file:match(&quot;^(.+)%.lua$&quot;)
			--require scripts .. slash .. file
			display(&quot;Loading scripts&quot; .. slash .. file .. &quot;.&quot;)
			pcall(&quot;scripts&quot; .. slash .. file)
		end
	end
end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>System Update and Synchronization</name>
            <packageName></packageName>
            <script>-- Called shortly after startup, and once an hour thereafter to check for updates
-- to the main system. Also manages the updating of code from the main Github repo.
local slash = (string.char(getMudletHomeDir():byte()) == &quot;/&quot;) and &quot;/&quot; or &quot;\\&quot;
local path = getMudletHomeDir()
local profiles = path .. slash .. &quot;current&quot;
local distro = path .. slash .. &quot;distro&quot;

-- Create the &quot;distro&quot; folder if it doesn't already exist.
CheckForDistroFolder = function ()
	if lfs.attributes(distro) ~= nil and lfs.attributes(distro).mode == &quot;directory&quot; then
		return
	end
	
	local origin_dir = lfs.currentdir()
	lfs.chdir(path)
	lfs.mkdir(&quot;distro&quot;)
	lfs.chdir(origin_dir)
end

-- Find the most recent profile .xml.
GetNewestProfile = function ()
	if lfs.attributes(profiles) == nil then
		return
	end
	
	local profile_table = {}

	-- Collect files in the profile folder and store their modification date.
	for filename in lfs.dir(profiles) do
		if filename ~= &quot;.&quot; and filename ~= &quot;..&quot; then
			profile_table[#profile_table + 1] = {name = filename, last_mod = lfs.attributes(profiles .. slash .. filename, &quot;modification&quot;)}
		end
	end

	-- Sort these files by newest to oldest.
	table.sort(profile_table, function (a, b) return b.last_mod &lt; a.last_mod end)

	return profile_table[1]
end

-- Copy the newest profile and send it to the folder containing the repo.</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Lua Library Extensions</name>
            <packageName></packageName>
            <script>-- Extended, MUD-oriented functionality tacked on to the default Lua methods.
-- In most cases (read: anything not involving tables), will work just like
-- the original functions, eg. myvariable:jright()

-- String

local noTitleWords = {
	&quot;a&quot;, &quot;an&quot;, &quot;the&quot;, &quot;and&quot;, &quot;of&quot;, &quot;in&quot;
}

string.title = function (str)
	if type(str) == &quot;string&quot; then
		str = str:gsub(&quot;([a-zA-Z']+)&quot;, function (word)
			if table.contains(noTitleWords, word) == false or word == str:match(&quot;^%w+&quot;) then
				word = string.upper(word:sub(1, 1)) .. string.lower(word:sub(2, -1))
				return word
			end
		end)
		return str
	else
	return str
	end
end

string.right = function (str)
	str = tostring(str)
	return string.rep(&quot; &quot;, cd.sys.wrapWidth - string.len(str)) .. str
end

string.center = function (str)
	str = tostring(str)
	return string.rep(&quot; &quot;, (cd.sys.wrapWidth / 2) - math.round(string.len(str) / 2)) .. str
end

string.trim = function (str)
	str = tostring(str)
	return str:gsub(&quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)
end

string.space = function (x)
	x = x or 0
	return string.rep(&quot; &quot;, x)
end

string.truncate = function (str, n)
	str = tostring(str)

	if str:len() &gt; n then
		return str:sub(1, n - 3) .. &quot;...&quot;
	else
		return str
	end
end

string.wrap = function (str, limit, indent, indent1, tail)
	indent = indent or &quot;&quot;
	indent1 = indent1 or indent
	limit = limit or cd.sys.wrapWidth
	tail = tail or &quot;&quot;

	local here = 1 - #indent1
	return indent1 .. str:gsub(&quot;(%s+)()(%S+)()&quot;, function(sp, st, word, fi)
		if fi - here &gt; limit then
			here = st - #indent

			return &quot;\n&quot; .. indent .. word
		end
	end)
end

string.wrap2 = function(str, maxLen, ind, dec)
	-- str: The message.
	-- maxLen: Column the message can write to.
	-- ind: How many spaces to indent the message by.
	-- dec: Decoration. Should be a string only.

	maxLen = maxLen or 72
	ind = ind or 0
	dec = dec or &quot;&quot;
	local endDec = dec
	if dec == &quot;[&quot; then endDec = &quot;]&quot;
		elseif dec == &quot;\(&quot; then endDec = &quot;\)&quot;
		elseif dec == &quot;\&lt;&quot; then endDec = &quot;\&gt;&quot;
		elseif dec == &quot;\{&quot; then endDec = &quot;\}&quot;
	end

	local decSpace = ind - (dec:len() + 1)
	if decSpace &lt; 1 then decSpace = 1 end

	-- Output is a table into which lines of text are stored.
	local output = {
		[1] = &quot;&quot;
	}

	-- Break the string apart.
	str = str:split(&quot; &quot;)

	-- Create the head of the string.
	if dec ~= &quot;&quot; then
		table.insert(str, 1, string.space(decSpace) .. dec .. &quot; &quot;)
	elseif ind == 0 then
		table.insert(str, 1, &quot;&quot;)
	else
		table.insert(str, 1, string.space(ind))
	end

	-- Form lines based on string length.
	local length = 0
	local line = 1
	for i, txt in ipairs(str) do
		local l = txt:len()
		if i &gt; 2 then l = l + 1 end -- To account for the space.
		length = length + l
		if length &lt;= maxLen then
			if i &gt; 2 then
				output[line] = output[line] .. &quot; &quot; .. txt
			else
				output[line] = output[line] .. txt
			end
		else
			-- New line.
			length = l + ind
			line = line + 1
			output[line] = string.space(ind) .. txt
		end
	end

	-- Put the end decoration on the tail.
	if endDec ~= &quot;&quot; then
		output[line] = output[line] .. string.space(maxLen - string.len(output[line])) .. endDec
	end

	return table.concat(output, &quot;\n&quot;)
end

string.jleft = function (str, amt)
	str = tostring(str)

	if not str then error(&quot;No string passed to string.jleft().&quot;) end
	if not amt or amt &lt; 0 then amt = 0 end

	return str .. string.rep(&quot; &quot;, amt - str:len())
end

string.jright = function (str, amt)
	str = tostring(str)

	if not str then error(&quot;No string passed to string.jright().&quot;) end
	if not amt or amt &lt; 0 then amt = 0 end

	return string.rep(&quot; &quot;, amt - str:len()) .. str
end

string.jcenter = function (str, amt)
	str = tostring(str)

	if not str then error(&quot;No string passed to string.jright().&quot;) end
	if not amt or amt &lt; 0 then amt = 0 end

	local space = amt - str:len()
	local cut1 = math.round(space / 2)
	local cut2 = space - cut1

	return string.rep(&quot; &quot;, cut1) .. str .. string.rep(&quot; &quot;, cut2)
end

-- Table

table.shuffle = function (t)
	assert(t, &quot;table.shuffle() expected a table, got nil&quot;)
	local newTable = t
	local iterations = #newTable
	local j
    
	for i = iterations, 2, -1 do
		j = math.random(i)
		newTable[i], newTable[j] = newTable[j], newTable[i]
	end

	return newTable
end

pairsByKeys = function (t, f)
	local a = {}

	for n in pairs(t) do
		table.insert(a, n)
	end

	table.sort(a, f)
	local i = 0
	local iter = function ()
		i = i + 1
		if a[i] == nil then
			return nil
		else
			return a[i], t[a[i]]
		end
	end

	return iter
end

table.sentence = function (t)
	assert(t, &quot;table.sentence() expected a table, got nil.&quot;)

	local table_string = &quot;&quot;

	if #t == 0 then return &quot;&quot; end
	if #t == 1 then return t[1] end

	for i = 1, #t do
		local append = &quot; &quot;

		if #t &gt; 2 then append = &quot;,&quot; .. append end
		if i == #t then append = append .. &quot;and &quot; end
		if i ~= 1 then table_string = table_string .. append end

		table_string = table_string .. t[i]
	end

	return table_string
end

-- Math

math.round = function (num, idp)
	local mult = 10 ^ (idp or 0)
	return math.floor(num * mult + 0.5) / mult
end</script>
            <eventHandlerList/>
        </Script>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>Events</name>
            <packageName></packageName>
            <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>handleInitializationEvents</name>
                <packageName></packageName>
                <script>local SysLoadHandler = function ()
	CheckForScriptsFolder()
	CheckForDistroFolder()
end

handleInitializationEvents = function (e, ...)
	if e == &quot;sysLoadEvent&quot; then
		SysLoadHandler(...)
	end
end</script>
                <eventHandlerList>
                    <string>sysLoadEvent</string>
                </eventHandlerList>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
    <VariablePackage>
        <HiddenVariables/>
    </VariablePackage>
</MudletPackage>
